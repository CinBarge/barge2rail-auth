"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.24.
"""

import os
from datetime import timedelta
from pathlib import Path

import dj_database_url
from decouple import config
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

# SECURITY WARNING: keep the secret key used in production secret!
# M1.1: Secret key validation - must be set and at least 50 characters

# Load SECRET_KEY from environment
SECRET_KEY = config("SECRET_KEY", default=None)

# Validate SECRET_KEY
if not SECRET_KEY:
    if DEBUG:
        # Development fallback - insecure but clearly marked
        SECRET_KEY = (
            "django-insecure-dev-key-only-not-for-production-" + "x" * 20
        )  # pragma: allowlist secret
    else:
        # Production: Must be explicitly set
        # pragma: allowlist secret
        raise ImproperlyConfigured(
            "SECRET_KEY must be set in environment variables. "
            "Generate one with: python -c 'from django.core.management.utils import "
            "get_random_secret_key; print(get_random_secret_key())'"
        )
elif len(SECRET_KEY) < 50:
    # SECRET_KEY exists but is too short
    raise ImproperlyConfigured(
        f"SECRET_KEY must be at least 50 characters long "
        f"(current: {len(SECRET_KEY)} characters). "
        # pragma: allowlist secret
        "Generate a new one with: python -c 'from django.core.management.utils import "
        "get_random_secret_key; print(get_random_secret_key())'"
    )

# M1.2: ALLOWED_HOSTS validation - must be set when DEBUG=False
ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS", default="localhost,127.0.0.1" if DEBUG else ""
).split(",")
ALLOWED_HOSTS = [
    host.strip() for host in ALLOWED_HOSTS if host.strip()
]  # Clean whitespace
if not DEBUG and not ALLOWED_HOSTS:
    raise ImproperlyConfigured(
        "ALLOWED_HOSTS must be set in environment variables when DEBUG=False. "
        "Example: ALLOWED_HOSTS=sso.barge2rail.com,www.sso.barge2rail.com"
    )

# M1.8: CSRF configuration - trusted origins for production
CSRF_TRUSTED_ORIGINS_STR = config(
    "CSRF_TRUSTED_ORIGINS",
    default="http://localhost:8000,http://127.0.0.1:8000" if DEBUG else "",
)
CSRF_TRUSTED_ORIGINS = [
    origin.strip() for origin in CSRF_TRUSTED_ORIGINS_STR.split(",") if origin.strip()
]
CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = "Lax"
CSRF_USE_SESSIONS = False  # Cookie-based

# Trust X-Forwarded-Proto header from proxy
if not DEBUG:
    SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# Gate 7: Session Security Configuration
SESSION_ENGINE = "django.contrib.sessions.backends.db"  # Database-backed sessions
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access
SESSION_COOKIE_AGE = 1800  # 30 minutes in seconds
SESSION_SAVE_EVERY_REQUEST = True  # Update last activity on every request
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Don't persist after browser close

# OAuth-compatible session cookie settings
# Modern browsers block cookies on cross-site redirects (OAuth callback
# from Google) SameSite=None required for OAuth flows, Secure=True required
# for SameSite=None in production
if DEBUG:
    # Development: Allow OAuth redirects over HTTP
    SESSION_COOKIE_SAMESITE = None  # Required for OAuth callbacks
    SESSION_COOKIE_SECURE = False  # HTTP allowed in development
else:
    # Production: Secure OAuth over HTTPS
    # Required for OAuth callbacks (string 'None' for production)
    SESSION_COOKIE_SAMESITE = "None"
    SESSION_COOKIE_SECURE = True  # HTTPS required for SameSite=None

# Application definition
INSTALLED_APPS = [
    # Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third party (oauth2_provider before local apps to allow override)
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "corsheaders",
    "oauth2_provider",
    # Local apps (after oauth2_provider to override admin)
    "sso",
    "dashboard",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "sso.middleware.OAuthAdminMiddleware",  # OAuth authentication for admin
    "sso.middleware.SessionActivityMiddleware",  # Gate 7: Session timeout tracking
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# M1.3: Database configuration with connection pooling and health checks
DATABASES = {
    "default": dj_database_url.config(
        default=f"sqlite:///{BASE_DIR / 'db.sqlite3'}",
        conn_max_age=600,  # Connection pooling: 10 minutes
        conn_health_checks=True,  # Enable connection health checks
    )
}

# M1.9: Password validation with minimum 12 characters
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": (
            "django.contrib.auth.password_validation."
            "UserAttributeSimilarityValidator"
        )
    },
    {
        "NAME": ("django.contrib.auth.password_validation.MinimumLengthValidator"),
        "OPTIONS": {"min_length": 12},
    },
    {"NAME": ("django.contrib.auth.password_validation.CommonPasswordValidator")},
    {"NAME": ("django.contrib.auth.password_validation.NumericPasswordValidator")},
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "America/New_York"
USE_I18N = True
USE_TZ = True

# M1.6: Static files configuration with WhiteNoise
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"]
STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "sso.User"

# Authentication Backends - OAuth primary, password fallback
# OAuthBackend enables Google OAuth authentication for admin access
# ModelBackend provides password-based fallback for emergency access
AUTHENTICATION_BACKENDS = [
    "sso.backends.OAuthBackend",  # OAuth authentication (primary)
    # Password-based fallback (emergency access)
    "django.contrib.auth.backends.ModelBackend",
]

# Authentication URLs - Override Django defaults
LOGIN_URL = "/login/"
LOGIN_REDIRECT_URL = "/dashboard/"
LOGOUT_REDIRECT_URL = "/login/"

# --- B2R SSO config ---
SSO_VALIDATION_URL = os.getenv(
    "SSO_VALIDATION_URL", "http://localhost:8900/mock/validate"
)

# Django REST Framework (single source of truth)
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # Use local JWT validation
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",
    ],
    "DEFAULT_PAGINATION_CLASS": ("rest_framework.pagination.PageNumberPagination"),
    "EXCEPTION_HANDLER": "sso.utils.custom_exception_handler",
}
PAGE_SIZE = 20

# Simple JWT
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": "barge2rail-sso",
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "JTI_CLAIM": "jti",
}

# OAuth2 Provider (django-oauth-toolkit)
OAUTH2_PROVIDER = {
    # Use custom Application model
    "APPLICATION_MODEL": "sso.Application",
    # Enable OpenID Connect (OIDC) support
    "OIDC_ENABLED": True,
    # RSA Private Key for signing OpenID Connect ID tokens
    # Required when using RS256 algorithm (loaded from environment)
    # Note: Escape sequences like \n are decoded from the .env file
    "OIDC_RSA_PRIVATE_KEY": config("OIDC_RSA_PRIVATE_KEY", default="").replace(
        "\\n", "\n"
    ),
    # OAuth2 scopes
    "SCOPES": {
        "read": "Read access",
        "write": "Write access",
        "openid": "OpenID Connect",
        "profile": "User profile information",
        "email": "User email address",
        "roles": "Application roles and permissions",
    },
    "DEFAULT_SCOPES": ["openid", "profile", "email", "roles"],
    "OIDC_EXTRA_SCOPE_CLAIMS": "sso.oidc_claims.CustomScopeClaims",
    "OIDC_ID_TOKEN_INCLUDE_CLAIMS": True,
    # Token lifetimes (align with SIMPLE_JWT)
    "ACCESS_TOKEN_EXPIRE_SECONDS": 900,  # 15 minutes
    "REFRESH_TOKEN_EXPIRE_SECONDS": 604800,  # 7 days
    "AUTHORIZATION_CODE_EXPIRE_SECONDS": 600,  # 10 minutes
    # OAuth2 settings
    "ROTATE_REFRESH_TOKEN": True,
    "PKCE_REQUIRED": False,  # Can enable for enhanced security
    "OAUTH2_VALIDATOR_CLASS": ("sso.oauth_validators.CustomOAuth2Validator"),
    # Allow existing client credentials
    "CLIENT_ID_GENERATOR_CLASS": ("oauth2_provider.generators.ClientIdGenerator"),
    "CLIENT_SECRET_GENERATOR_CLASS": (
        "oauth2_provider.generators.ClientSecretGenerator"
    ),
    # Disable auto admin registration (we have custom admin)
    "APPLICATION_ADMIN_CLASS": "",
}

# Rate limiting configuration
RATELIMIT_ENABLE = not DEBUG  # Disable in development
RATELIMIT_USE_CACHE = "default"

# Configure cache for rate limiting
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
        "LOCATION": "ratelimit-cache",
    }
}

# Google OAuth Settings
GOOGLE_CLIENT_ID = config("GOOGLE_CLIENT_ID", default=None)
GOOGLE_CLIENT_SECRET = config("GOOGLE_CLIENT_SECRET", default=None)
BASE_URL = config("BASE_URL", default="http://127.0.0.1:8000")

# OAuth Admin Whitelist (Phase 4)
# Comma-separated email addresses authorized for admin/superuser access via OAuth
ADMIN_WHITELIST = config("ADMIN_WHITELIST", default="")
SUPERUSER_WHITELIST = config("SUPERUSER_WHITELIST", default="")

# CORS - Allow both development and production origins
CORS_ALLOWED_ORIGINS = config(
    "CORS_ALLOWED_ORIGINS",
    default=(
        "http://localhost:3000,http://localhost:3001,http://localhost:8000,"
        "http://127.0.0.1:8000,http://127.0.0.1:3001,"
        "https://sso.barge2rail.com,https://admin.barge2rail.com,"
        "https://barge2rail-sso.onrender.com"
    ),
).split(",")
CORS_ALLOW_CREDENTIALS = True

# Additional CORS settings for production
CORS_ALLOW_ALL_ORIGINS = config("CORS_ALLOW_ALL_ORIGINS", default=False, cast=bool)
CORS_ALLOWED_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# M1.5: Security headers and settings
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"

# Production-only security settings
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    # SESSION_COOKIE_SECURE and SESSION_COOKIE_HTTPONLY already configured
    # above for OAuth compatibility
    CSRF_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# M1.7: Production logging configuration with file rotation
# Create logs directory if it doesn't exist
LOGS_DIR = BASE_DIR / "logs"
LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "file": {
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGS_DIR / "django.log",
            "maxBytes": 1024 * 1024 * 10,  # 10MB
            "backupCount": 5,
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console", "file"],
        "level": config("DJANGO_LOG_LEVEL", default="INFO"),
    },
    "loggers": {
        "django": {
            "handlers": ["console", "file"],
            "level": config("DJANGO_LOG_LEVEL", default="INFO"),
            "propagate": False,
        },
        "django.security": {
            "handlers": ["console", "file"],
            "level": "WARNING",
            "propagate": False,
        },
        "sso": {
            "handlers": ["console", "file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
        "dashboard": {
            "handlers": ["console", "file"],
            "level": "DEBUG" if DEBUG else "INFO",
            "propagate": False,
        },
    },
}
