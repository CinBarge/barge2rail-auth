#!/bin/bash

echo "=== Google OAuth JavaScript Error Fix ==="
echo ""

cd /Users/cerion/Projects/barge2rail-auth

echo "üîß Issue Fixed:"
echo "   - Removed Google GSI library that caused iframe postMessage errors"
echo "   - Replaced with clean OAuth redirect flow"
echo "   - Updated template to use the implementation from your original plan"
echo ""

# Kill existing servers
echo "üîÑ Restarting Django server..."
pkill -f "python manage.py runserver" 2>/dev/null
sleep 2

# Start fresh Django server
python manage.py runserver 127.0.0.1:8000 &
SERVER_PID=$!

echo "üöÄ Django server started (PID: $SERVER_PID)"
sleep 5

# Test server health
echo ""
echo "üè• Testing server health..."
if curl -s http://127.0.0.1:8000/api/auth/health/ >/dev/null 2>&1; then
    echo "‚úÖ Server is responding"
else
    echo "‚ùå Server not responding"
    exit 1
fi

# Test configuration
echo ""
echo "üìã Testing Google OAuth Configuration..."
CONFIG_RESPONSE=$(curl -s http://127.0.0.1:8000/api/auth/config/google/ 2>/dev/null)
if [ $? -eq 0 ]; then
    echo "‚úÖ Configuration endpoint accessible"
    echo "$CONFIG_RESPONSE" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    print('   Client ID configured:', data.get('google_client_id', False))
    print('   Client Secret configured:', data.get('google_client_secret', False))
    print('   Fully configured:', data.get('fully_configured', False))
    print('   Redirect URI:', data.get('redirect_uri', 'Not set'))
except:
    print('   Could not parse configuration')
"
else
    echo "‚ùå Configuration endpoint not accessible"
fi

# Test OAuth URL generation
echo ""
echo "üîó Testing OAuth URL generation..."
OAUTH_RESPONSE=$(curl -s http://127.0.0.1:8000/api/auth/oauth/google/url/ 2>/dev/null)
if echo "$OAUTH_RESPONSE" | grep -q "auth_url"; then
    echo "‚úÖ OAuth URL generated successfully"
    # Extract and show the URL
    echo "$OAUTH_RESPONSE" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    url = data['auth_url']
    print('   URL generated with correct client ID')
    if '930712511884-2e7qt4f7t2ldklf8jjrljo5pv6j7defa' in url:
        print('   ‚úÖ Using correct client ID')
    else:
        print('   ‚ùå Using wrong client ID')
except:
    print('   Could not parse OAuth URL response')
"
else
    echo "‚ùå OAuth URL generation failed"
fi

echo ""
echo "üß™ Manual Testing Instructions:"
echo ""
echo "1. **CLEAR YOUR BROWSER CACHE** (important for JavaScript fixes)"
echo "   Chrome: Cmd+Shift+Delete"
echo "   Safari: Cmd+Option+E"
echo ""
echo "2. **Open browser and navigate to:**"
echo "   http://127.0.0.1:8000/login/"
echo ""
echo "3. **Test the Google OAuth flow:**"
echo "   - Click the 'Google' tab"
echo "   - Click 'Continue with Google' button"
echo "   - Should redirect to Google without JavaScript errors"
echo "   - Complete Google sign-in process"
echo "   - Should redirect back and log you in"
echo ""
echo "4. **Check browser console (F12):**"
echo "   - Should NOT see 'postMessage' errors"
echo "   - Should NOT see transform_layer_library errors"
echo ""

echo "üìã What's Been Fixed:"
echo "‚úÖ Removed conflicting Google GSI library"
echo "‚úÖ Fixed JavaScript postMessage errors"
echo "‚úÖ Updated to use clean OAuth redirect flow"
echo "‚úÖ Matches your original plan implementation"
echo "‚úÖ Uses correct Google client ID"
echo "‚úÖ Proper error handling and user feedback"
echo ""

echo "üîß Implementation Details:"
echo "- Template: /templates/login.html (updated)"
echo "- Method: OAuth redirect flow (no iframes)"
echo "- Backend: Complete OAuth code exchange"
echo "- Frontend: Clean JavaScript, no Google GSI conflicts"
echo ""

echo "The JavaScript errors should now be completely resolved!"
echo "Server PID: $SERVER_PID (use 'kill $SERVER_PID' to stop)"
